{"version":3,"sources":["static-data.js","component/Empty.js","reducers/contacts.js","constants/action-types.js","reducers/index.js","reducers/user.js","reducers/messages.js","reducers/typing.js","reducers/activeUserId.js","store/index.js","component/Header.js","component/Chats.js","actions/index.js","containers/MessageInput.js","containers/ChatWindow.js","component/Main.js","containers/User.js","component/Sidebar.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","Empty","_ref","user","name","profile_pic","status","first_name","split","react_default","a","createElement","className","src","alt","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","findName","email","internet","avatar","generate","SET_ACTIVE_USER_ID","SET_TYPING_VALUE","SEND_MESSAGE","combineReducers","state","arguments","undefined","action","type","_action$payload","payload","message","userId","allUserMsgs","keys","pop","defineProperty","typing","activeUserId","store","createStore","Header","Chat","concat","Chats","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","ref","map","Chats_Chat","key","Component","setActiveUserId","id","MessageInput","value","getState","onSubmit","e","preventDefault","dispatch","onChange","target","placeholder","ChatWindow","activeUser","activeMsgs","component_Header","src_component_Chats","values","src_containers_MessageInput","Main","src_containers_ChatWindow","src_component_Empty","handleUserClick","_ref2","User","onClick","bind","Sidebar","contact","src_containers_User","App","_store$getState","src_component_Sidebar","src_component_Main","Boolean","window","location","hostname","match","render","ReactDOM","src_containers_App","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.caed0a3d.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n\tlet messages = {};\n\t_.forEach(users, user => {\n\t\tmessages[user.user_id] = {\n\t\t\t..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n\t\t};\n\t});\n\treturn messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n\tuser: generateUser(),\n\tmessages: getMessages(10),\n\ttyping: \"\",\n\tcontacts,\n\tactiveUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n\treturn {\n\t\tname: faker.name.findName(),\n\t\temail: faker.internet.email(),\n\t\tprofile_pic: faker.internet.avatar(),\n\t\tstatus: txtgen.sentence(),\n\t\tuser_id: shortid.generate()\n\t};\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n\treturn {\n\t\tnumber,\n\t\ttext: txtgen.sentence(),\n\t\tis_user_msg: faker.random.boolean()\n\t};\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n\treturn Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n\treturn Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}","import React from \"react\";\nimport \"./Empty.css\";\n\nconst Empty = ({ user }) => {\n\tconst { name, profile_pic, status } = user;\n\tconst first_name = name.split(\" \")[0];\n\n\treturn (\n\t\t<div className=\"Empty\">\n\t\t\t<h1 className=\"Empty__name\">Welcome, {first_name} </h1>\n\t\t\t<img src={profile_pic} alt={name} className=\"Empty__img\" />\n\t\t\t<p className=\"Empty__status\">\n\t\t\t\t<b>Status:</b> {status}\n\t\t\t</p>\n\t\t\t<button className=\"Empty__btn\">Start a conversation</button>\n\t\t\t<p className=\"Empty__info\">\n\t\t\t\tSearch for someone to start chatting with or go to Contacts to see who\n\t\t\t\tis available\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n\nexport default Empty;","import { contacts } from \"../static-data\";\n\nexport default (state =  contacts , action) => {\n\treturn state;\n};","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";","import { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport contacts from \"./contacts\";\nimport activeUserId from \"./activeUserId\";\nimport messages from './messages';\nimport typing from \"./typing\";\n\nexport default combineReducers({\n\tuser,\n\tmessages,\n\ttyping,\n\tcontacts,\n\tactiveUserId\n});","import { generateUser } from \"../static-data\";\nexport default function user(state = generateUser(), action) {\n\treturn state;\n}","import { getMessages } from \"../static-data\";\nimport { SEND_MESSAGE } from \"../constants/action-types\";\nimport _ from 'lodash'\n\nexport default function messages(state = getMessages(10), action) {\n\tswitch (action.type) {\n\t\tcase SEND_MESSAGE:\n\t\t\tconst { message, userId } = action.payload;\n\t\t\tconst allUserMsgs = state[userId];\n\t\t\tconst number = +_.keys(allUserMsgs).pop() + 1;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[userId]: {\n\t\t\t\t\t...allUserMsgs,\n\t\t\t\t\t[number]: {\n\t\t\t\t\t\tnumber,\n\t\t\t\t\t\ttext: message,\n\t\t\t\t\t\tis_user_msg: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import { SET_TYPING_VALUE,SEND_MESSAGE } from \"../constants/action-types\";\n\nexport default function typing(state = \"\", action) {\n\tswitch (action.type) {\n\t\tcase SET_TYPING_VALUE:\n\t\t\treturn action.payload;\n\t\tcase SEND_MESSAGE:\n\t\t\treturn \"\";\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import { SET_ACTIVE_USER_ID } from \"../constants/action-types\";\nexport default function activeUserId(state = null, action) {\n\tswitch (action.type) {\n\t\tcase SET_ACTIVE_USER_ID:\n\t\t\treturn action.payload;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import { createStore } from \"redux\";\nimport combineReducers from \"../reducers/index\";\n\nconst store = createStore(combineReducers);\n\nexport default store;","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header({ user }) {\n\tconst { name, status } = user;\n\treturn (\n\t\t<header className=\"Header\">\n\t\t\t<h1 className=\"Header__name\">{name}</h1>\n\t\t\t<p className=\"Header__status\">{status}</p>\n\t\t</header>\n\t);\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport \"./Chats.css\";\n\nconst Chat = ({ message }) => {\n\n\tconst { text, is_user_msg } = message;\n\treturn (\n\t\t<span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}><span> {text} </span></span>\n\t);\n};\n\nclass Chats extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.chatsRef = React.createRef();\n\t}\n\tcomponentDidMount() {\n\t\tthis.scrollToBottom();\n\t}\n\tcomponentDidUpdate() {\n\t\tthis.scrollToBottom();\n\t}\n\tscrollToBottom = () => {\n\t\tthis.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Chats\" ref={this.chatsRef}>\n\t\t\t\t{this.props.messages.map(message => (\n\t\t\t\t\t<Chat message={message} key={message.number} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Chats;","import {\n\tSET_ACTIVE_USER_ID,\n\tSET_TYPING_VALUE,\n\tSEND_MESSAGE\n} from \"../constants/action-types\";\n\nexport const setActiveUserId = id => ({\n\ttype: SET_ACTIVE_USER_ID,\n\tpayload: id\n});\nexport const setTypingValue = value => ({\n\ttype: SET_TYPING_VALUE,\n\tpayload: value\n});\nexport const sendMessage = (message, userId) => ({\n\ttype: SEND_MESSAGE,\n\tpayload: {\n\t\tmessage,\n\t\tuserId\n\t}\n})","import React from \"react\";\nimport store from \"../store\";\nimport { setTypingValue, sendMessage } from \"../actions/index\";\nimport \"./MessageInput.css\";\n\n\nconst MessageInput = ({ value }) => {\n\tconst state = store.getState();\n\tconst handleChange = e => {\n\n\t\tstore.dispatch(setTypingValue(e.target.value));\n\n\t};\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tconst { typing, activeUserId } = state;\n\t\tstore.dispatch(sendMessage(typing, activeUserId));\n\t};\n\treturn (\n\t\t<form className=\"Message\" onSubmit={handleSubmit}>\n\t\t\t<input\n\t\t\t\tclassName=\"Message__input\"\n\t\t\t\tonChange={handleChange}\n\t\t\t\tvalue={value}\n\t\t\t\tplaceholder=\"write a message\"\n\t\t\t/>\n\t\t</form>\n\t);\n};\n\nexport default MessageInput;","import React from \"react\";\nimport store from \"../store\";\nimport Header from \"../component/Header\";\nimport Chats from \"../component/Chats\";\nimport _ from 'lodash'\nimport './ChatWindow.css';\nimport MessageInput from \"./MessageInput\";\n\n\nconst ChatWindow = ({ activeUserId }) => {\n\tconst state = store.getState();\n\tconst activeUser = state.contacts[activeUserId];\n\tconst activeMsgs = state.messages[activeUserId];\n\tconst { typing } = state;\n\n\treturn (\n\t\t<div className=\"ChatWindow\">\n\t\t\t<Header user={activeUser} />\n\t\t\t<Chats messages={_.values(activeMsgs)} />\n\t\t\t<MessageInput value={typing} />\n\t\t</div>\n\t);\n};\n\nexport default ChatWindow;","import React from \"react\";\nimport \"./Main.css\";\nimport Empty from \"../component/Empty\";\nimport ChatWindow from \"../containers/ChatWindow\";\n\nconst Main = ({ user, activeUserId }) => {\n\tconst renderMainContent = () => {\n\t\tif (!activeUserId) {\n\t\t\treturn <Empty user={user} activeUserId={activeUserId} />;\n\t\t} else {\n\t\t\treturn <ChatWindow activeUserId={activeUserId} />;\n\t\t}\n\t};\n\treturn <main className=\"Main\">{renderMainContent()}</main>;\n};\n\nexport default Main;","import React from \"react\";\nimport \"./User.css\";\nimport { setActiveUserId } from \"../actions/index\";\nimport store from \"../store\";\n\n\n\nconst User = ({ user }) => {\n\tconst { name, profile_pic, status } = user;\n\n\treturn (\n\t\t<div className=\"User\" onClick={handleUserClick.bind(null, user)}>\n\t\t\t<img src={profile_pic} alt={name} className=\"User__pic\" />\n\t\t\t<div className=\"User__details\">\n\t\t\t\t<p className=\"User__details-name\">{name}</p>\n\t\t\t\t<p className=\"User__details-status\">{status}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\nfunction handleUserClick({ user_id }) {\n\n\tstore.dispatch(setActiveUserId(user_id));\n}\n\nexport default User;","import React from \"react\";\nimport User from \"../containers/User\";\nimport \"./Sidebar.css\";\n\nconst Sidebar = ({ contacts }) => {\n\treturn (\n\t\t<aside className=\"Sidebar\">\n\t\t\t{contacts.map((contact) => <User key={contact.user_id} user={contact}  />)}\n\t\t</aside>\n\t);\n};\n\nexport default Sidebar;","import React from 'react';\n\nimport './App.css';\nimport Main from '../component/Main'\nimport Sidebar from '../component/Sidebar'\nimport store from '../store'\nimport _ from 'lodash'\n\n\nconst App = () => {\n\tconst {contacts,user, activeUserId  } = store.getState();\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Sidebar contacts={_.values(contacts)} />\n\t\t\t<Main user={user} activeUserId={activeUserId} />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nconst render = () => {\n\treturn ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\nrender();\nstore.subscribe(render);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}